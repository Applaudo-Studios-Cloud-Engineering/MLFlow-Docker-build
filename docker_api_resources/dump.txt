from typing import Union

from pydantic import BaseModel
from typing import List

class OpinionBase(BaseModel):
    is_good: bool
    # description: Union[str, None] = None


class OpinionCreate(OpinionBase):
    pass


class Opinion(OpinionBase):
    id: int
    owner_id: int

    class Config:
        orm_mode = True


class ModelBase(BaseModel):
    model_id: str
    model_version: str


class ModelCreate(ModelBase):
    is_active: bool


class Model(ModelBase):
    id: int
    is_active: bool
    opinions: list[Opinion] = []

    class Config:
        orm_mode = True

class Columns(BaseModel):
    Gender: str
    Married: str
    Dependents: str
    Education: str
    Self_Employed: str
    ApplicantIncome: float
    CoapplicantIncome: float
    LoanAmount: float
    Loan_Amount_Term: float
    Credit_History: float
    Property_Area: float
    Total_Income: float

class Item(BaseModel):
    columns: List[str] #Columns
    data: List[List[str]]

class ItemFormatted(BaseModel):
    columns: List[str] = []
    data: List[List[float]]

class RequestInvocationsFormatted(BaseModel):
    dataframe_split: ItemFormatted

class RequestInvocations(BaseModel):
    dataframe_split: Item

class Response(BaseModel):
    predictions: List[float]

class ResponseFormatted(BaseModel):
    predictions: List[str]

class ResponseJson(BaseModel):
    response: str
from sqlalchemy import Boolean, Column, ForeignKey, Integer, String, Float,BIGINT, TEXT ,BOOLEAN
from sqlalchemy.orm import relationship

from database import Base
# from .database import Base


class Model(Base):
    __tablename__ = "models"

    id = Column(BIGINT, primary_key=True, index=True)
    model_id = Column(TEXT, unique=True, index=True)
    model_version = Column(TEXT)
    is_active = Column(BOOLEAN, default=True)

    opinions = relationship("Opinion", back_populates="owner")


class Opinion(Base):
    __tablename__ = "opinions"

    id = Column(BIGINT, primary_key=True, index=True)
    is_good = Column(BOOLEAN, default=True)
    # request_id = Column(Integer, ForeignKey("requests.id"))
    owner_id = Column(BIGINT, ForeignKey("models.id"))

    owner = relationship("Model", back_populates="opinions")
    # request = relationship("Request", back_populates="opinion")

# class Request(Base):
#     __tablename__ = "requests"

#     id = Column(Integer, primary_key=True, index=True)
#     Gender = Column(String)
#     Married = Column(String)
#     Dependents = Column(String)
#     Education = Column(String)
#     Self_Employed = Column(String)
#     ApplicantIncome = Column(Float)
#     CoapplicantIncome = Column(Float)
#     LoanAmount = Column(Float)
#     Loan_Amount_Term = Column(Float)
#     Credit_History = Column(Float)
#     Property_Area = Column(Float)
#     Total_Income = Column(Float)

#     opinion = relationship("Opinion", back_populates="request")
# uvicorn sql_app.main:app --reload
from fastapi import Depends, FastAPI, HTTPException
from sqlalchemy.orm import Session
from fastapi.encoders import jsonable_encoder

import requests
import os

import crud, models, schemas
from database import SessionLocal, engine

# docker inspect distracted_johnson | grep IPAddress
# If running uvicorn sql_app.main:app --reload change crud models
# from . import crud, models, schemas
# from .database import SessionLocal, engine

models.Base.metadata.create_all(bind=engine)

app = FastAPI()


# Dependency
def get_db():
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()


@app.post("/models/", response_model=schemas.Model)
def create_model(model: schemas.ModelCreate, db: Session = Depends(get_db)):
    db_model = crud.get_model_by_model_id(db, model_id=model.model_id)
    if db_model:
        raise HTTPException(status_code=400, detail="Model already registered")
    return crud.create_model(db=db, model=model)


@app.get("/models/", response_model=list[schemas.Model])
def read_models(skip: int = 0, limit: int = 100, db: Session = Depends(get_db)):
    models = crud.get_models(db, skip=skip, limit=limit)
    return models


@app.get("/models/{model_id}", response_model=schemas.Model)
def read_model(model_id: int, db: Session = Depends(get_db)):
    db_model = crud.get_model(db, model_id=model_id)
    if db_model is None:
        raise HTTPException(status_code=404, detail="Model not found")
    return db_model

# {'title': 'item1', 'description': 'description1', 'owner_id': 4} example
@app.post("/models/{model_id}/opinions/", response_model=schemas.Opinion)
def create_opinion_for_model(
    model_id: int, opinion: schemas.OpinionCreate, db: Session = Depends(get_db)
):
    return crud.create_model_opinion(db=db, opinion=opinion, model_id=model_id)


@app.get("/opinions/", response_model=list[schemas.Opinion])
def read_opinions(skip: int = 0, limit: int = 100, db: Session = Depends(get_db)):
    opinions = crud.get_opinions(db, skip=skip, limit=limit)
    return opinions

@app.post("/invocations", response_model=schemas.ResponseFormatted)
def invocations(item1: schemas.RequestInvocations):
    list = []
    for value  in item1.dataframe_split.data:
        aux = []
        for count2, dataValue in enumerate(value):
            if item1.dataframe_split.columns[count2] == "Gender":
                aux.append(float(0) if dataValue == 'Male' else float(1))
            elif item1.dataframe_split.columns[count2] == "Married":
                aux.append(float(0) if dataValue == 'No' else float(1))
            elif item1.dataframe_split.columns[count2] == "Dependents":
                dataValue.replace("3+", "3")
                aux.append(float(dataValue))
            elif item1.dataframe_split.columns[count2] == "Education":
                aux.append(float(0) if dataValue == 'Not Graduate' else float(1))
            elif item1.dataframe_split.columns[count2] == "Self_Employed":
                aux.append(float(0) if dataValue == 'No' else float(1))
            elif item1.dataframe_split.columns[count2] == "ApplicantIncome":
                aux.append(float(dataValue))
            elif item1.dataframe_split.columns[count2] == "CoapplicantIncome":
                aux.append(float(dataValue))
            elif item1.dataframe_split.columns[count2] == "LoanAmount":
                aux.append(float(dataValue))
            elif item1.dataframe_split.columns[count2] == "Loan_Amount_Term":
                aux.append(float(dataValue))
            elif item1.dataframe_split.columns[count2] == "Credit_History":
                aux.append(float(dataValue))
            elif item1.dataframe_split.columns[count2] == "Property_Area":
                aux.append(float(0) if dataValue == 'Urban' else float(1) if dataValue == 'Semiurban' else float(2))
            elif item1.dataframe_split.columns[count2] == "Total_Income":
                aux.append(float(dataValue))
            else:
                aux.append(float(dataValue))
        list.append(aux)

    item2 = schemas.RequestInvocationsFormatted(dataframe_split=schemas.ItemFormatted(columns=item1.dataframe_split.columns,data=list))
    json = jsonable_encoder(item2)
    env = os.environ['MLFLOW_ENDPOINT']
    
    print(env)
    response = requests.post((env + '/invocations'), json=json)

    responseJson= schemas.Response(predictions=response.json().get('predictions'))

    list = []
    for value in responseJson.predictions:
        list.append("N" if value == 0 else "Y")

    return schemas.ResponseFormatted(predictions=list)

# @app.post("/invocations2")
# def invocations(requestInvocationsFormatted: RequestInvocationsFormatted):
#     json = jsonable_encoder(requestInvocationsFormatted)
#     print(json)
#     response = requests.post("http://localhost:5000/invocations",json=json)
#     return response.json()

@app.post("/invocations2", response_model=schemas.ResponseJson)
def invocations2(item1: schemas.Columns):
    list = []
    aux = []
    columns = []

    columns.append('Gender')
    aux.append(float(0) if item1.Gender == 'Male' else float(1))
        
    columns.append('Married')
    aux.append(float(0) if item1.Married == 'No' else float(1))
    
    columns.append('Dependents')
    item1.Dependents.replace("3+", "3")
    aux.append(float(item1.Dependents))

    columns.append('Education')
    aux.append(float(0) if item1.Education == 'Not Graduate' else float(1))

    columns.append('Self_Employed')
    aux.append(float(0) if item1.Self_Employed == 'No' else float(1))

    columns.append('ApplicantIncome')
    aux.append(float(item1.ApplicantIncome))
    
    columns.append('CoapplicantIncome')
    aux.append(float(item1.CoapplicantIncome))

    columns.append('LoanAmount')
    aux.append(float(item1.LoanAmount))

    columns.append('Loan_Amount_Term')
    aux.append(float(item1.Loan_Amount_Term))

    columns.append('Credit_History')
    aux.append(float(item1.Credit_History))
    
    columns.append('Property_Area')
    aux.append(float(0) if item1.Property_Area == 'Urban' else float(1) if item1.Property_Area == 'Semiurban' else float(2))

    columns.append('Total_Income')
    aux.append(float(item1.Total_Income))
    
    list.append(aux)

    item2 = schemas.RequestInvocationsFormatted(dataframe_split=schemas.ItemFormatted(columns=columns,data=list))
    json = jsonable_encoder(item2)
    env = os.environ['MLFLOW_ENDPOINT']
    
    print(env)
    response = requests.post((env + '/invocations'), json=json)

    responseJson= schemas.Response(predictions=response.json().get('predictions'))

    response=''
    for value in responseJson.predictions:
        response = "No" if value == 0 else "Yes"

    return schemas.ResponseJson(response=response)
    from sqlalchemy import create_engine
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker
import os

# SQLALCHEMY_DATABASE_URL = "sqlite:///./sql_app.db"
# SQLALCHEMY_DATABASE_URL = "postgresql://mlflow:password@mlflow-mysql.cduy8wtiztlt.us-east-1.rds.amazonaws.com:3306/mlflow"
env_host = os.environ['PGHOST'] # PGHOST PGPORT PGDATABASE PGUSER PGPASSWORD
env_port = os.environ['PGPORT']
env_database = os.environ['PGDATABASE']
env_user = os.environ['PGUSER']
env_pass = os.environ['PGPASSWORD']
SQLALCHEMY_DATABASE_URL = 'mysql://' + env_user + ':' + env_pass + '@' + env_host + ':' + env_port + '/' + env_database #"postgresql://postgres:admin@localhost:5432/mlflow"

engine = create_engine(
    SQLALCHEMY_DATABASE_URL, 
    # connect_args={"check_same_thread": False}
)
SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)

Base = declarative_base()
from sqlalchemy.orm import Session

import models, schemas
# from . import models, schemas

def get_model(db: Session, model_id: int):
    return db.query(models.Model).filter(models.Model.id == model_id).first()


def get_model_by_model_id(db: Session, model_id: str):
    return db.query(models.Model).filter(models.Model.model_id == model_id).first()


def get_models(db: Session, skip: int = 0, limit: int = 100):
    return db.query(models.Model).offset(skip).limit(limit).all()


def create_model(db: Session, model: schemas.ModelCreate):
    # fake_hashed_password = user.password + "notreallyhashed"
    db_model = models.Model(model_id=model.model_id, model_version=model.model_version, is_active=model.is_active)
    db.add(db_model)
    db.commit()
    db.refresh(db_model)
    return db_model


def get_opinions(db: Session, skip: int = 0, limit: int = 100):
    return db.query(models.Opinion).offset(skip).limit(limit).all()


def create_model_opinion(db: Session, opinion: schemas.OpinionCreate, model_id: int):
    db_item = models.Opinion(**opinion.dict(), owner_id=model_id)
    db.add(db_item)
    db.commit()
    db.refresh(db_item)
    return db_item